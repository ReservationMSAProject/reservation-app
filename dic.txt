# 🎫 콘서트 예매 시스템 프론트엔드 문서

## 1. 📋 프로젝트 개요

### 프로젝트명: reservation-front3
**콘서트 티켓 예매 애플리케이션의 프론트엔드**

React 기반으로 제작된 콘서트 티켓 예매 시스템의 사용자 인터페이스입니다. 사용자는 직관적인 웹 인터페이스를 통해 콘서트를 검색하고, 티켓을 예매하며, 예매 내역을 관리할 수 있습니다.

### 🎯 주요 기능 요약
1. **사용자 인증 시스템** - 회원가입, 로그인, 로그아웃
2. **콘서트 브라우징** - 콘서트 목록 조회 및 상세 정보 확인
3. **티켓 예매 관리** - 티켓 예매 생성 및 예매 목록 조회
4. **사용자 프로필** - 개인 정보 조회 및 관리
5. **반응형 네비게이션** - 로그인 상태에 따른 동적 메뉴

### 🛠️ 기술 스택 및 라이브러리
- **프레임워크:** React 19.1.0
- **빌드 도구:** Vite 7.0.4
- **라우팅:** React Router DOM 7.7.0
- **HTTP 클라이언트:** Axios 1.10.0
- **코드 품질:** ESLint 9.30.1
- **스타일링:** CSS (순수 CSS)

### 📅 개발 정보
- **개발 기간:** 2025년 상반기 개발 중
- **참여 인원:** 개인 프로젝트
- **버전:** 0.0.0 (개발 단계)

## 2. 🚀 시작하기

### 📋 사전 요구 사항
- Node.js (v18 이상 권장)
- npm 패키지 매니저
- 백엔드 서버 (http://localhost:8080)

### 💿 설치 및 실행 방법

> **토글:** 설치 단계
> 
> ```bash
> # 저장소 복제
> git clone [repository-url]
> cd reservation-front3
> 
> # 의존성 설치
> npm install
> 
> # 개발 서버 실행
> npm run dev
> ```

### 🔧 환경 변수 설정
현재 하드코딩된 백엔드 URL: `http://localhost:8080`

### 🌐 개발 환경 구성
- **개발 서버:** Vite (포트 5173)
- **프록시 설정:** /auth 경로는 백엔드로 프록시
- **CORS:** withCredentials: true로 쿠키 기반 인증 지원

## 3. 📁 프로젝트 구조

```
reservation-front3/
├── 📄 package.json          # 프로젝트 설정 및 의존성
├── 📄 vite.config.js        # Vite 빌드 도구 설정
├── 📄 eslint.config.js      # ESLint 코드 품질 규칙
├── 📄 index.html            # HTML 엔트리 포인트
├── 📄 README.md             # 프로젝트 설명서
│
├── 📁 public/
│   └── 🖼️ vite.svg         # Vite 로고
│
└── 📁 src/                  # 소스 코드 루트
    ├── 📄 main.jsx          # React 앱 엔트리 포인트
    ├── 📄 App.jsx           # 메인 애플리케이션 컴포넌트
    ├── 🎨 App.css           # 앱 전역 스타일
    ├── 🎨 index.css         # 기본 CSS 스타일
    │
    ├── 📁 components/       # 재사용 가능한 React 컴포넌트
    │   ├── 🧩 Navbar.jsx            # 네비게이션 바
    │   ├── 🔐 Login.jsx             # 로그인 폼
    │   ├── ✍️ Register.jsx          # 회원가입 폼
    │   ├── 👤 UserProfile.jsx       # 사용자 프로필
    │   ├── 🎵 ConcertList.jsx       # 콘서트 목록
    │   ├── 🎤 ConcertDetail.jsx     # 콘서트 상세 정보
    │   ├── 🎫 ReservationCreate.jsx # 예매 생성
    │   └── 📋 ReservationList.jsx   # 예매 목록
    │
    ├── 📁 services/         # API 통신 및 외부 서비스
    │   └── 🌐 api.js        # Axios 기반 API 클라이언트
    │
    └── 📁 assets/           # 정적 자산
        └── 🖼️ react.svg    # React 로고
```

### 🗂️ 주요 디렉토리 역할
- **`src/`** - 모든 React 소스 코드가 위치
- **`components/`** - UI 컴포넌트들이 기능별로 분리
- **`services/`** - 백엔드 API와의 통신 로직
- **`assets/`** - 이미지, 아이콘 등 정적 파일

## 4. ⚙️ 주요 기능

### 🔐 사용자 인증 시스템
> **관련 컴포넌트:** `Login.jsx`, `Register.jsx`, `UserProfile.jsx`
> **API 서비스:** `api.js` - login, register, getUserInfo, logout 함수
> 
> **구현 로직:**
> - 쿠키 기반 인증 (httpOnly)
> - 앱 시작 시 자동 로그인 상태 확인
> - 로그인 성공 시 전역 상태 업데이트

### 🎵 콘서트 관리 시스템
> **관련 컴포넌트:** `ConcertList.jsx`, `ConcertDetail.jsx`
> **API 서비스:** `api.js` - getConcerts, getConcertById 함수
> 
> **구현 로직:**
> - 콘서트 목록 페이지네이션
> - 클릭을 통한 상세 페이지 이동
> - 로딩 상태 및 에러 처리

### 🎫 예매 관리 시스템
> **관련 컴포넌트:** `ReservationCreate.jsx`, `ReservationList.jsx`
> **API 서비스:** `api.js` - createReservation, getReservations 함수
> 
> **구현 로직:**
> - 콘서트별 티켓 예매 생성
> - 사용자별 예매 내역 조회
> - 예매 상태 표시

### 🧭 내비게이션 시스템
> **관련 컴포넌트:** `Navbar.jsx`
> **연동:** App.jsx의 로그인 상태와 연동
> 
> **구현 로직:**
> - 로그인 상태에 따른 메뉴 동적 변경
> - React Router를 활용한 SPA 네비게이션

## 5. 🧩 컴포넌트 구조

### 컴포넌트 계층도
```
App.jsx (루트)
├── Navbar.jsx (상단 네비게이션)
├── 라우팅 기반 페이지 컴포넌트들:
│   ├── Login.jsx
│   ├── Register.jsx
│   ├── UserProfile.jsx
│   ├── ConcertList.jsx
│   ├── ConcertDetail.jsx
│   ├── ReservationCreate.jsx
│   └── ReservationList.jsx
```

### 📦 컴포넌트별 역할과 Props

> **🔍 App.jsx (메인 컨테이너)**
> - **역할:** 전역 상태 관리 및 라우팅 설정
> - **상태:** isLoggedIn, isLoading
> - **Props 전달:** 로그인 상태 및 함수들을 하위 컴포넌트로 전달

> **🧭 Navbar.jsx**
> - **역할:** 네비게이션 메뉴 및 로그아웃 기능
> - **Props:** `{ isLoggedIn, onLogout }`

> **🔐 인증 컴포넌트들 (Login, Register)**
> - **역할:** 사용자 인증 폼 제공
> - **Props:** `{ onLogin }` (Login), `{ onRegister }` (Register)

> **👤 UserProfile.jsx**
> - **역할:** 사용자 정보 표시 및 로그아웃
> - **Props:** `{ onLogout }`

> **🎵 콘서트 컴포넌트들**
> - **ConcertList:** 콘서트 목록 표시
> - **ConcertDetail:** 선택된 콘서트의 상세 정보
> - **Props:** URL 파라미터를 통한 ID 전달

### 🔄 재사용 가능한 공통 컴포넌트
현재는 페이지별 특화 컴포넌트로 구성되어 있으며, 향후 공통 UI 컴포넌트 분리 예정

## 6. 🔄 상태 관리

### 상태 관리 방식
- **주요 도구:** React Hooks (useState, useEffect)
- **전역 상태:** App.jsx에서 로그인 상태 관리
- **로컬 상태:** 각 컴포넌트별 데이터 및 UI 상태

### 🗂️ 주요 상태들과 데이터 플로우

> **🔐 인증 상태 플로우**
> ```
> App.jsx (isLoggedIn) 
>   ↓ Props
> Navbar.jsx ← 로그인 상태 표시
>   ↓ Props  
> 각 페이지 컴포넌트 ← 인증 기반 접근 제어
> ```

> **📊 컴포넌트별 로컬 상태**
> - **ConcertList:** `concerts`, `loading`, `error`
> - **ConcertDetail:** `concert`, `loading`, `error`
> - **ReservationList:** `reservations`, `loading`, `error`
> - **UserProfile:** `userInfo`, `loading`, `error`

### 🔄 API 데이터 플로우
1. 컴포넌트 마운트 → useEffect 트리거
2. API 서비스 함수 호출 → Axios 요청
3. 응답 데이터 → 로컬 상태 업데이트
4. 상태 변경 → UI 리렌더링

## 7. 🎨 스타일링

### 스타일링 방법
- **주요 도구:** 순수 CSS
- **파일 구조:** 
  - `index.css` - 전역 기본 스타일
  - `App.css` - 애플리케이션 레이아웃 스타일
  - 개별 컴포넌트 스타일은 CSS 클래스로 관리

### 🎨 디자인 시스템
- **색상:** 기본 브라우저 색상 팔레트 사용
- **타이포그래피:** 시스템 기본 폰트
- **레이아웃:** Flexbox 기반 반응형 디자인

> **💡 향후 개선 사항**
> - CSS Modules 또는 Styled-components 도입 검토
> - 디자인 시스템 구축
> - 컴포넌트 라이브러리 도입

## 8. 📦 주요 라이브러리 & 의존성

### 🚀 Production 의존성
| 라이브러리 | 버전 | 용도 |
|-----------|------|------|
| **react** | ^19.1.0 | UI 라이브러리 |
| **react-dom** | ^19.1.0 | DOM 렌더링 |
| **react-router-dom** | ^7.7.0 | SPA 라우팅 |
| **axios** | ^1.10.0 | HTTP 클라이언트 |

### 🛠️ Development 의존성
| 라이브러리 | 버전 | 용도 |
|-----------|------|------|
| **@vitejs/plugin-react** | ^4.6.0 | Vite React 플러그인 |
| **vite** | ^7.0.4 | 빌드 도구 및 개발 서버 |
| **eslint** | ^9.30.1 | 코드 품질 관리 |
| **@types/react** | ^19.1.8 | TypeScript 타입 정의 |

### 🔧 라이브러리 선택 이유
- **React 19:** 최신 기능 및 성능 개선
- **Vite:** 빠른 빌드 및 HMR 지원
- **React Router:** SPA 표준 라우팅 솔루션
- **Axios:** 강력한 HTTP 클라이언트 기능

## 9. 🐛 트러블슈팅

### 🔧 개발 중 주요 이슈와 해결 방법

> **❗ CORS 에러 해결**
> **문제:** 백엔드 API 호출 시 CORS 에러 발생
> **해결:** 
> - Vite 프록시 설정으로 /auth 경로 프록시
> - withCredentials: true로 쿠키 전송 활성화

> **🔐 인증 토큰 관리**
> **문제:** 새로고침 시 로그인 상태 초기화
> **해결:** 
> - 앱 시작 시 getUserInfo API로 토큰 유효성 검증
> - httpOnly 쿠키 기반 인증으로 XSS 방지

> **🔄 비동기 상태 관리**
> **문제:** API 호출 중 로딩 상태 표시 필요
> **해결:** 
> - 각 컴포넌트에 loading 상태 추가
> - try-catch로 에러 처리 및 사용자 피드백

### 🚨 알려진 버그나 개선사항
- 에러 메시지 다국어화 필요
- 로딩 스피너 UI 개선 필요
- API 에러 핸들링 고도화 필요

## 10. 📈 향후 계획

### 🎯 추가 개발 예정 기능
- **🎫 좌석 선택 시스템** - 콘서트별 좌석 배치도 및 선택 UI
- **💳 결제 시스템 연동** - 실제 결제 게이트웨이 통합
- **📱 반응형 디자인 강화** - 모바일 최적화
- **🔔 실시간 알림** - WebSocket 기반 예매 상태 알림
- **🔍 고급 검색 필터** - 장르, 날짜, 지역별 콘서트 검색

### 🛠️ 기술적 개선 사항
- **상태 관리 고도화** - Context API 또는 Redux 도입
- **코드 분할** - React.lazy를 활용한 번들 최적화
- **테스트 코드 작성** - Jest, React Testing Library 도입
- **타입 안전성** - TypeScript 전환
- **성능 최적화** - React.memo, useMemo 활용

### 🎨 UX/UI 개선
- **디자인 시스템 구축** - 일관된 컴포넌트 라이브러리
- **다크 모드 지원** - 사용자 테마 선택 기능
- **접근성 개선** - ARIA 속성 및 키보드 네비게이션
- **애니메이션 추가** - 부드러운 페이지 전환 효과

---

## 📝 문서 작성 정보
- **작성일:** 2025년 7월 30일
- **작성자:** GitHub Copilot
- **문서 버전:** 1.0
- **마지막 업데이트:** 프로젝트 최초 분석 시점

> **💡 Tip:** 이 문서는 노션에서 토글 블록, 콜아웃 블록, 테이블 등을 활용하여 더욱 시각적으로 구성할 수 있습니다.
